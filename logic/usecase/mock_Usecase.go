// Code generated by mockery v2.20.0. DO NOT EDIT.

package ohlc

import (
	context "context"
	http "net/http"

	jwt "github.com/golang-jwt/jwt/v5"

	mock "github.com/stretchr/testify/mock"

	model "example.com/m/v2/model"
)

// MockUsecase is an autogenerated mock type for the Usecase type
type MockUsecase struct {
	mock.Mock
}

// ApproveLoan provides a mock function with given fields: ctx, loanId
func (_m *MockUsecase) ApproveLoan(ctx context.Context, loanId int64) error {
	ret := _m.Called(ctx, loanId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, loanId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecodeJwt provides a mock function with given fields: cookies
func (_m *MockUsecase) DecodeJwt(cookies []*http.Cookie) (jwt.MapClaims, error) {
	ret := _m.Called(cookies)

	var r0 jwt.MapClaims
	var r1 error
	if rf, ok := ret.Get(0).(func([]*http.Cookie) (jwt.MapClaims, error)); ok {
		return rf(cookies)
	}
	if rf, ok := ret.Get(0).(func([]*http.Cookie) jwt.MapClaims); ok {
		r0 = rf(cookies)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.MapClaims)
		}
	}

	if rf, ok := ret.Get(1).(func([]*http.Cookie) error); ok {
		r1 = rf(cookies)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoan provides a mock function with given fields: ctx, userId
func (_m *MockUsecase) GetLoan(ctx context.Context, userId int64) ([]model.Loan, error) {
	ret := _m.Called(ctx, userId)

	var r0 []model.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]model.Loan, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []model.Loan); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoan provides a mock function with given fields: ctx, amount, terms, userId
func (_m *MockUsecase) NewLoan(ctx context.Context, amount float64, terms int, userId int64) error {
	ret := _m.Called(ctx, amount, terms, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, int, int64) error); ok {
		r0 = rf(ctx, amount, terms, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PayLoan provides a mock function with given fields: ctx, amount, loanId, term, userId
func (_m *MockUsecase) PayLoan(ctx context.Context, amount float64, loanId int64, term int64, userId int64) error {
	ret := _m.Called(ctx, amount, loanId, term, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, int64, int64, int64) error); ok {
		r0 = rf(ctx, amount, loanId, term, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserLogin provides a mock function with given fields: ctx, email, password
func (_m *MockUsecase) UserLogin(ctx context.Context, email string, password string) (string, error) {
	ret := _m.Called(ctx, email, password)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRegister provides a mock function with given fields: ctx, user
func (_m *MockUsecase) UserRegister(ctx context.Context, user model.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUsecase creates a new instance of MockUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUsecase(t mockConstructorTestingTNewMockUsecase) *MockUsecase {
	mock := &MockUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
