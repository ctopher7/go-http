// Code generated by mockery v2.21.1. DO NOT EDIT.

package io

import (
	context "context"

	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	model "example.com/m/v2/model"

	sql "database/sql"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// BcryptComparePassword provides a mock function with given fields: hash, password
func (_m *MockRepository) BcryptComparePassword(hash []byte, password []byte) error {
	ret := _m.Called(hash, password)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(hash, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BcryptGenerateHash provides a mock function with given fields: password
func (_m *MockRepository) BcryptGenerateHash(password []byte) ([]byte, error) {
	ret := _m.Called(password)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeginTx provides a mock function with given fields: ctx
func (_m *MockRepository) BeginTx(ctx context.Context) (*sql.Tx, error) {
	ret := _m.Called(ctx)

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sql.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sql.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitTx provides a mock function with given fields: tx
func (_m *MockRepository) CommitTx(tx *sql.Tx) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockRepository) GetUserByEmail(ctx context.Context, email string) (model.User, error) {
	ret := _m.Called(ctx, email)

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertLoan provides a mock function with given fields: ctx, tx, loan
func (_m *MockRepository) InsertLoan(ctx context.Context, tx *sql.Tx, loan model.Loan) (int64, error) {
	ret := _m.Called(ctx, tx, loan)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.Loan) (int64, error)); ok {
		return rf(ctx, tx, loan)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.Loan) int64); ok {
		r0 = rf(ctx, tx, loan)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.Loan) error); ok {
		r1 = rf(ctx, tx, loan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertRepayment provides a mock function with given fields: ctx, tx, repayment
func (_m *MockRepository) InsertRepayment(ctx context.Context, tx *sql.Tx, repayment model.Repayment) (int64, error) {
	ret := _m.Called(ctx, tx, repayment)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.Repayment) (int64, error)); ok {
		return rf(ctx, tx, repayment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.Repayment) int64); ok {
		r0 = rf(ctx, tx, repayment)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.Repayment) error); ok {
		r1 = rf(ctx, tx, repayment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: ctx, tx, user
func (_m *MockRepository) InsertUser(ctx context.Context, tx *sql.Tx, user model.User) (int64, error) {
	ret := _m.Called(ctx, tx, user)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.User) (int64, error)); ok {
		return rf(ctx, tx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.User) int64); ok {
		r0 = rf(ctx, tx, user)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.User) error); ok {
		r1 = rf(ctx, tx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JwtNew provides a mock function with given fields: claim
func (_m *MockRepository) JwtNew(claim jwt.MapClaims) *jwt.Token {
	ret := _m.Called(claim)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(jwt.MapClaims) *jwt.Token); ok {
		r0 = rf(claim)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	return r0
}

// JwtParse provides a mock function with given fields: token
func (_m *MockRepository) JwtParse(token string) (jwt.MapClaims, error) {
	ret := _m.Called(token)

	var r0 jwt.MapClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (jwt.MapClaims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) jwt.MapClaims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.MapClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JwtSign provides a mock function with given fields: token
func (_m *MockRepository) JwtSign(token *jwt.Token) (string, error) {
	ret := _m.Called(token)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token) (string, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackTx provides a mock function with given fields: tx
func (_m *MockRepository) RollbackTx(tx *sql.Tx) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
